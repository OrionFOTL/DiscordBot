// <auto-generated />
using System;
using DiscordBot.Features.Fishing.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordBot.Features.Fishing.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231205193520_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.GameState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "jp",
                            Name = "Japan"
                        });
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiscordName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.SavedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SavedImages");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.OwnedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Equipped")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.Bait", b =>
                {
                    b.HasBaseType("DiscordBot.Features.Fishing.Entities.Equipment.Item");

                    b.ToTable("Bait");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.FishingRod", b =>
                {
                    b.HasBaseType("DiscordBot.Features.Fishing.Entities.Equipment.Item");

                    b.ToTable("FishingRod");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.OwnedBait", b =>
                {
                    b.HasBaseType("DiscordBot.Features.Fishing.Entities.Equipment.OwnedItem");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.ToTable("OwnedBait");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.OwnedFishingRod", b =>
                {
                    b.HasBaseType("DiscordBot.Features.Fishing.Entities.Equipment.OwnedItem");

                    b.ToTable("OwnedFishingRod");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.GameState", b =>
                {
                    b.HasOne("DiscordBot.Features.Fishing.Database.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DiscordBot.Features.Fishing.Database.Player", "Player")
                        .WithOne("GameState")
                        .HasForeignKey("DiscordBot.Features.Fishing.Database.GameState", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Entities.Equipment.OwnedItem", b =>
                {
                    b.HasOne("DiscordBot.Features.Fishing.Entities.Equipment.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordBot.Features.Fishing.Database.Player", "Player")
                        .WithMany("OwnedItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DiscordBot.Features.Fishing.Database.Player", b =>
                {
                    b.Navigation("GameState");

                    b.Navigation("OwnedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
